// see wpilibsuite/StandaloneAppSamples
//
// i have no idea if this is right, it's just magic.
//

plugins {
    id "java"
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
    id 'edu.wpi.first.WpilibTools' version '1.3.0'
}

sourceSets {
    main {
        java {
            srcDir "../../lib/src/main/java"
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


application {
    mainClass = 'org.team100.logging.Main'
}

wpilibTools.deps.wpilibVersion = wpi.versions.wpilibVersion.get()

def nativeConfigName = 'wpilibNatives'
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

nativeTasks.addToSourceSetResources(sourceSets.main)
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpimath")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpinet")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpiutil")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("ntcore")
// nativeConfig.dependencies.add wpilibTools.deps.wpilib("cscore")
// nativeConfig.dependencies.add wpilibTools.deps.wpilibOpenCv("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())


// apply plugin: 'com.github.johnrengelman.shadow'

// def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// // This is added by GradleRIO's backing project DeployUtils.
// deploy {
//     targets {
//         roborio(getTargetTypeClass('RoboRIO')) {
//             // Team number is loaded either from the .wpilib/wpilib_preferences.json
//             // or from command line. If not found an exception will be thrown.
//             // You can use getTeamOrDefault(team) instead of getTeamNumber if you
//             // want to store a team number in this file.
//             team = project.frc.getTeamNumber()
//             debug = project.frc.getDebugOrDefault(false)

//             artifacts {
//                 // First part is artifact name, 2nd is artifact type
//                 // getTargetTypeClass is a shortcut to get the class type using a string

//                 frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
//                 }

//                 // Static files artifact
//                 frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
//                     files = project.fileTree('src/main/deploy')
//                     directory = '/home/lvuser/deploy'
//                 }
//             }
//         }
//     }
// }

// def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
// wpi.java.debugJni = false

// Set this to true to enable desktop support.
// def includeDesktopSupport = true

// repositories {
//     mavenCentral()
//     flatDir {
//         dirs '/usr/local/frc/java', '.'
//     }
// }

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    // roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    // roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    // roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    // roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // implementation 'com.google.code.gson:gson:2.8.5'

    // // implementation files('apriltag.jar')
    // implementation files('wpimath.jar')
    // implementation files('wpinet.jar')
    // implementation files('wpiutil.jar')
    // implementation files('ntcore.jar')
    // implementation files('cscore.jar')
    // implementation files('cameraserver.jar')
    // implementation files('opencv-460.jar')
    // implementation files('wpilibj.jar')
    // implementation files('wpiHal.jar')

    implementation wpilibTools.deps.wpilibJava("wpiutil")
    implementation wpilibTools.deps.wpilibJava("wpimath")
    implementation wpilibTools.deps.wpilibJava("wpinet")
    implementation wpilibTools.deps.wpilibJava("ntcore")
    implementation wpilibTools.deps.wpilibJava("cscore")
    implementation wpilibTools.deps.wpilibJava("cameraserver")
    implementation wpilibTools.deps.wpilibOpenCvJava("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())

    // implementation group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: wpi.versions.jacksonVersion.get()
    // implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: wpi.versions.jacksonVersion.get()
    // implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: wpi.versions.jacksonVersion.get()

    // implementation group: "org.ejml", name: "ejml-simple", version: wpi.versions.ejmlVersion.get()
    // implementation group: "us.hebi.quickbuf", name: "quickbuf-runtime", version: wpi.versions.quickbufVersion.get();
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// // Simulation configuration (e.g. environment variables).
// wpi.sim.addGui().defaultEnabled = true
// wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
// jar {
//     from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//     from sourceSets.main.allSource
//     manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
//     duplicatesStrategy = DuplicatesStrategy.INCLUDE
// }

// Configure jar and deploy tasks
// deployArtifact.jarTask = jar
// wpi.java.configureExecutableTasks(jar)
// wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}


shadowJar {
    archiveBaseName = "java_udp_listener"
    archiveVersion = ""
    exclude("module-info.class")
    archiveClassifier.set(wpilibTools.currentPlatform.platformName)
}

wrapper {
    gradleVersion = '8.5'
}